(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    239546,       4942]
NotebookOptionsPosition[    231759,       4804]
NotebookOutlinePosition[    232122,       4820]
CellTagsIndexPosition[    232079,       4817]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["Quit"], "Input",
 CellChangeTimes->{{3.779297877330984*^9, 3.779297877719945*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"849afddc-a818-44e8-8476-eedbb95cc64d"],

Cell[CellGroupData[{

Cell["Neural networks", "Title",
 CellChangeTimes->{{3.777110858552351*^9, 
  3.77711086205732*^9}},ExpressionUUID->"ad1af4d9-e950-4515-af8d-\
274aa4667224"],

Cell["\<\
Building a simple neural network to break a CAPTCHA such as the one shown \
below:\
\>", "Subtitle",
 CellChangeTimes->{{3.7771108681863227`*^9, 3.777110915658539*^9}, 
   3.7771109466382036`*^9},ExpressionUUID->"1f964149-e896-44de-9680-\
23241456ab41"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SetDirectory", "@", 
   RowBox[{"NotebookDirectory", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Example", "=", 
  RowBox[{"Import", "@", "\"\<captcha.jpg\>\""}]}]}], "Input",
 CellChangeTimes->{{3.777110918280224*^9, 3.7771109374511976`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"209e100f-0f59-4c45-a619-d6e852c35515"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Ph2BKVTTNLgfC5qBLtuNPTluWQWKt7fHTqEnx7tCklfJkcXhVK89zaGjBDAm
WUPfQcPBJAd30bOwESMTjeOVi8h2UmwaIgfqLMi3baIHCAbkynaK0qJV5YRk
9zOt7XhjI1pdC5c/HBVf72SXtvOvN/Iv17LPVzJP36d/fZeC+5f3mb99zP9l
pfjnT6Uf1ulHO5XH+/WfD9F+cdZ5dd5dOmc+nLPLZ92Pp93V0+7GcfkqnMvH
cmSepqk6XWXqjMSPkICLOJanBkCXiQfb6YHzmswcTJTukYBRM/upQSXM5k+6
mWM2fcbmCKXdmvRFR9UwcRPgmRfemDZExBjNpgCj2QcGjm7Nz9ey/asenBU2
zV5aKOVmza/f0bfWuilXPrnUnY8ML0VVBnup7vPdzOPPFwVWlLCZRrO6x77C
VdwuBLbPbcAzCzDtxPEmJhhzCs2TPdOPw0AvD6EUDWplwJmgpoJyf1JiFLqn
tkRjMLRMRFjXkRPaGQCoW+p9NOivDpFMF2TqIEaAOOFE0pP1ndrSh9TKJr12
1Fw5Y54d1P6+Rf+014Be0t/W6B/Xyo8+wyP1aJWE9ujRp9KjT8VHq7lHq5mX
u9Trfer9UXn1rLF51dlP8MdZ4bQgXlLDS3pwVZbjDTXLaMW+XuLHJU6uy1pH
GfPKWFLGsqzIgjhg2EGn0SnFWPKSI6M8Ee0TCbWac5gGyk4i/xqbYdwwE1qj
sWVNXB1iBHS5F4FBt2GC54tAyNgBA1LrxiXynM9stk4PuMvYuFABHR4MhqgT
vaLYKo61OdNqjPl4sjllvXjxXOf2CKGPse/Zs3W/KvNNZ1BZeTOsUDrKhM+7
8/ag+Kel0KsQlepbOJ5gq64VxsIQuCC2j1kMd8DhYkWI41XS6O60bxuoloO2
CQZjwEI5YQyS7ZTFZnXQLrHVGF0IpRMnqdRpunAQL+5cFb+Ecst76bebqTdf
Mm++5F5vlH5dp6HX/PNS9tnL5MsX8ZfPo7+9jv62knyylny2W/xxK//DZv7J
Ye230+6rs95KVP4SGe7EJ8d5+5wE0QpItUCJBxWIWxhQ5EBZBA0FdKEA45Kb
wXxsKlATbxrBQnqI64w+GHYcsWrLpM6n5cZVnwjx2cN+5ljMnAyz52MyajVz
qI/ghEXOCPILsYnXfTAdLMmBOMi23ciXy5cQ0agtpQ64mF4Ija73+PAhd3k5
zBTtehsMeFSXaQwChV8upd73fXWfFDKlg96SyECvIfwyA4jLniqZOblyAi7w
nQvloyw8RcilGBkTf/gao4KzLHi1zf6yTn+M9ZIyYDCMHvhR3GmYaTRfHjfE
l4wHDmuBsgxIERBQsfTRzrMgXgeXlH1WnIQK6kFa2IoxaxetD0fVN7uVV1u1
Fzut51uNpxvlJ19yj9euf1y5+HH55O/Lh49Xjh4tH/26ev56M/l+l3y3RS1t
UK+36BdHlXeH9MV5hwxzyZXU7uPN88/n7SpXbvVoTqhISm2g1SSrLoMWFF19
5uzcXwV1a45yHnXcSJ66rCF3BrnVsyYtbVBR2LzYjPcrl93iSbd4xJSOOSo0
qF9OenEg58EYIyZr7JktNxOEbqgXGXarvDQ/+ooJOXINtNOj4hmf2Gcie1z8
GDqrI4oEchWxtA0OZTf9gYe4d9kC7Ea896DiCUb1Hc9yOTNlseh5TSNOuo/M
75Ir9G5o8hV0L1QcQkTfqimC8zR4uz38cDwJ1z2iJwoOmqCjgaaKjCMtALJv
E5xT4szrinxdlaK0FCZ6oWx3P1HduqI/X5Rf7JDPtmgoJ083qWebFfgaaphf
vpR+gNBlOf3jx/xPn/K/fCZ/3SDxbxvPN4XnO4PX++L7UH81zKzHO9vpxn6m
dlKoX1CdVEskOYPqOcW2Q7YBxYPSEDTcR7RhcbuFysqZlKLAaKTpyghT1jUH
mZuR4ai23+DuGy4b4z6ft+9IjsnZWtsa14dMRu5cS1CPlc946pinDkX6QCiH
hq20yhKm1EB6DOW7Fcxn82PCUNXYmguS8K2E8jeGho8DQtVhskb9akQeyrld
KXukli70WhawdaAIeHrcxI0lOn5ExcIRZbf6JigNU6HyMiMuerlj3rczJ1f3
8UU99WYaFnT7FFeu+DHYOGosfWk9W2m93Rf20sZFzT6kha1058uZuH6kfD5Q
VnfFj9vih03u/Qb/bp395U35yRL99F3t2fvqs/f1p+8qT5YqT94Sb7eptzuF
t9slCIzh8cM+8em4tn7eCKXl0+zgIj+KkJM4RNR1J9sEmTYo9kCRB5QIqpjL
23Pc2hWrPeJbox5nSJheYk8TlCJ+gdJ1+T7x5qC+GrLoLlBQptudQ+leOtvv
Mvb7vJuHy5VhuiUk02pnV8BQFhjNVFebep8cdTODelSgwxx13syFWsUwQ8WE
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
    "], {{0, 88}, {200, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageResolution -> {100, 100}, Interleaving -> 
    True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{200, 88},
  PlotRange->{{0, 200}, {0, 88}}]], "Output",
 CellChangeTimes->{{3.777110924612219*^9, 3.777110938648478*^9}, {
   3.7792978595834155`*^9, 3.7792978818907537`*^9}, 3.7792979897393017`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"7c33889f-aa3e-42b8-b33a-9ec7958642d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preliminaries", "Section",
 CellChangeTimes->{{3.7771111527429075`*^9, 
  3.7771111571428895`*^9}},ExpressionUUID->"cb2549c3-ff61-4de6-a177-\
b76f25bbe8bc"],

Cell["The CAPTCHAs we are dealing with use the characters a-z0-9", "Text",
 CellChangeTimes->{{3.7771111611278915`*^9, 3.777111170951857*^9}, {
  3.7771112109180374`*^9, 
  3.7771112121350355`*^9}},ExpressionUUID->"fcffdf3e-e701-46eb-952e-\
ce688a7b5386"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CHARS", "=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"Alphabet", "[", "]"}], ",", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<0\>\"", ",", "\"\<9\>\""}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7646609512746844`*^9, 3.764660973769335*^9}, {
   3.764737533706267*^9, 3.7647375347019515`*^9}, 3.7771110867120485`*^9, {
   3.777111204968916*^9, 3.7771112065980377`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"2f025b1c-f533-4920-9b51-4a29b496b99c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>", 
   ",", "\<\"2\"\>", ",", "\<\"3\"\>", ",", "\<\"4\"\>", ",", "\<\"5\"\>", 
   ",", "\<\"6\"\>", ",", "\<\"7\"\>", ",", "\<\"8\"\>", ",", "\<\"9\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.77711114482824*^9, 3.7771112070570717`*^9, 3.7771117627094316`*^9, {
   3.7792978624238205`*^9, 3.7792978840828896`*^9}, 3.7792979917608943`*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"2d3cc3be-8f5c-44e8-8484-42d9d72f2f31"]
}, Open  ]],

Cell[TextData[{
 "We load the datasets as lists of rules ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Rule]", "y"}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "48e98c07-721e-406e-926f-661b343e801d"],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    RowBox[{"f", "(", "x", ")"}]}], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "4c61c1b1-0076-4f4e-ad40-318a85bbc3b2"],
 " is the function we want to learn"
}], "Text",
 CellChangeTimes->{{3.777112490707012*^9, 
  3.7771125452660503`*^9}},ExpressionUUID->"1d34931d-9aaf-4f51-8a9a-\
45035141779c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ImportDataSet", "[", "files_", "]"}], ":=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Import", "@", "file"}], "\[Rule]", 
     RowBox[{"StringTake", "[", 
      RowBox[{
       RowBox[{"FileNameTake", "@", "file"}], ",", "8"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"file", ",", "files"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.777111687481645*^9, 3.777111688590654*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"7c4b72aa-ac75-4312-b6b7-cefcb8a2cee5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TrainingData", "=", 
   RowBox[{"ImportDataSet", "@", 
    RowBox[{"FileNames", "[", "\"\<train/*.jpg\>\"", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TestData", "=", 
   RowBox[{"ImportDataSet", "@", 
    RowBox[{"FileNames", "[", "\"\<test/*.jpg\>\"", "]"}]}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.7644864527814293`*^9, 3.764486457484848*^9}, {
   3.7644864927325726`*^9, 3.7644865362990847`*^9}, {3.7644870385488825`*^9, 
   3.764487122315832*^9}, {3.764487189036377*^9, 3.764487190267086*^9}, {
   3.7644873136042323`*^9, 3.764487314826931*^9}, {3.764498611570743*^9, 
   3.7644986186817245`*^9}, {3.7644987756499195`*^9, 
   3.7644987757925415`*^9}, {3.764648370605319*^9, 3.7646483958680267`*^9}, {
   3.764855328084526*^9, 3.7648553397253933`*^9}, 3.764855370354435*^9, 
   3.7648554056570125`*^9, {3.7648567300797205`*^9, 3.7648567365304327`*^9}, {
   3.7649360309452963`*^9, 3.764936034289736*^9}, {3.7649363881338615`*^9, 
   3.764936420866705*^9}, {3.770403795598411*^9, 3.770403808697376*^9}, {
   3.770540643445859*^9, 3.770540667917365*^9}, {3.770543123864439*^9, 
   3.770543226933547*^9}, {3.7758994529603453`*^9, 3.7758994585613475`*^9}, {
   3.7758995440483503`*^9, 3.775899564881344*^9}, {3.7771111129841433`*^9, 
   3.777111113351143*^9}, {3.7771112747006435`*^9, 3.777111302514735*^9}, {
   3.777111364686103*^9, 3.777111365931122*^9}, {3.7771116912357225`*^9, 
   3.777111691911681*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"ef2e7fd2-12bd-461c-bf9d-db81b10663e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pre-processing", "Section",
 CellChangeTimes->{{3.777112560434046*^9, 
  3.777112566675047*^9}},ExpressionUUID->"27a71933-f07e-4088-a602-\
c8905cf0bb2e"],

Cell["\<\
We will train a neural network to solve a simpler problem, namely the mapping \
from each of 8 pieces of a CAPTCHA to the corresponding (single) character \
they show.
We discard color information, since it won\[CloseCurlyQuote]t help in this \
case.\
\>", "Text",
 CellChangeTimes->{{3.7771126036189766`*^9, 3.7771126189469805`*^9}, {
  3.7771126648680377`*^9, 3.777112666995014*^9}, {3.7771127245812826`*^9, 
  3.777112725475276*^9}, {3.7771134485797057`*^9, 3.777113457232696*^9}, {
  3.7771134929147153`*^9, 3.777113552722198*^9}, {3.7771136261493683`*^9, 
  3.777113640576371*^9}},ExpressionUUID->"d3fe6b61-7597-4ade-9985-\
fc8a5e5ae330"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitImage", "[", "im_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newim", "=", 
      RowBox[{"ColorSeparate", "[", 
       RowBox[{
        RowBox[{"ImageTake", "[", 
         RowBox[{"im", ",", 
          RowBox[{"{", 
           RowBox[{"13", ",", "44"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"20", ",", 
            RowBox[{"-", "18"}]}], "}"}]}], "]"}], ",", "\"\<V\>\""}], 
       "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"ImageTake", "[", 
       RowBox[{"newim", ",", "All", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"x", "+", "24"}]}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "140", ",", "20"}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.764854231229784*^9, 3.764854256275217*^9}, {
  3.76485477335824*^9, 3.764854773389161*^9}, {3.764913468467656*^9, 
  3.764913539471258*^9}, {3.764913583388961*^9, 3.7649135834982753`*^9}, {
  3.764918293017659*^9, 3.764918293173775*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"095d5c89-9bb1-436a-a0e7-37c6d54880d5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SplitImage", "@", "Example"}]], "Input",
 CellChangeTimes->{{3.777113469828701*^9, 3.777113472832683*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"6e405ae0-abdb-47e9-88b4-0fa8eed5d2ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxdUstu2lAQRV112WWX7V9022W3qfoBiUqjbqhEKlX9o26qVLQY29jmYShJ
ExAhgYiSEIxjm9gG4xd++/baxgE60ox1z507nnNmXh582vvwJJPJHD2FYW//
y+t8fv/r22fw8C539PEwl33/Jvc5e5jNvzqI0l5Afw49DEFk7lKSFipILATb
Zs+5uWbvQEmCtxIlUVo6azCIQxyBr7DTmZbeRFdeVCkEri3dzgVOT3AvjvqY
4gAwTscOWAibn1iDEvHrG1ZFf7dlhd/gxqCM0yRabpw1OjtdWQrZbOEIilE8
+M+uioUqXRtsQ74PGzqp0DRR13cZh+AaxRCyy+4oYQHANhGyQow3NBPOUgun
iqWLmJORZrtA76IFGsHk+Mz7YaJbGNziKFKp9ZMKV9Bdpa/B2D7GKLwfSeKD
sAU/wjlyIcrX6I8qTS+ixwHwmwHw/pYQjK7/PEapUy7t7lzz3BusWkDwIlH5
fvLY+eXSdCyt3SyX0DJBiongwAGGGQ3HmTYQnKRK92pKNDBNJ+pyOWxiFeLP
gDNs3TB1wwHueppit1NHaj3J9aCAjuetNNMGETv7roFRHSnhZfHM3YThmImw
eBj3WmejB3kmzPi5qMwYhhneTLnJiJ2NZMNcysyYlWHxMPRNVYMyB/rj4iym
6dAVWDdMcWHIphmmYqR7BO4nlp/igSqvd9YR+dX2eC013vN5L6qh/gONJdcq

      "], {{0, 32}, {24, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{24, 32},
    PlotRange->{{0, 24}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJytUstu00AUrVixZMsO/oItS7ZFfEArSsWmSC0S4p8QEBqntscz4/iRNn0l
JSVt07wcp3bIwyWNk+DYzmXGaYENOyyNde+ce849d2Yer75ZfnVvaWlp6z77
La+8e7q5ufL++QOWvNjYer2+sfby2cbbtfW1zServOwRWw/Zgjn8r+8m+Acw
cK9GSTBb5NH0FqgH4Ln+XVkYcyycQwy5o/61Y7nebWE4CyBKogPjGKBn2e3O
bJqoRbdkiTgAceR/o1TeIYd2cAdmywluqYKIcSZtOrCwOdRGfHYLZ7BIsnLq
s5Kv9Nn+j5INDBjtiURGIiNRjBAttptHRYbGcUH+oGGpAfPpAUHpQ0qNE04D
X0fbWakxnDDRiqrkyN5pucUBJ0OxoodJ2zNMZbHsXpQ4cPpRR0qDR/OBIRBB
/f6ztss8z3dTGsouxqqpX+RMKWb22alEpkCwmRDG2o6cRlfMP+L5oSgaeT6t
k0+lUNrwIbRlDpSkzL5hATTVz3ki4BLvpQLz4n+lJt3WDaxoRFRkf86ugnBG
XKOCRCQqCQpWc3szCCEu+OORH4SdPDI+ZU1MFEmxEnvXrGcQwvBAlvarlRxB
Ipr9ufdpr9p06j2vrsuKXojGTAnA7TiDrtMdwbRSLWiaqhdaFdtzW65Vt/tB
HEc39kVR0/ZNo1guV2rV83Om5LW8RLFBRC130rO67WrLZdO7F3ayPykgaujH
bavdGYyYg3ZzGk1CNmvJRBI9avaDxTvpOhMmcuaFfa93aRit31a5zPDy3PV9
dwzBXw/5F4M73uI=
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxtU0tz0lAUZly5dOtO/4Vbl27r+APaETtucIY64/i7WlpIuEmgGB7hHYtp
IRRC3kBICNA8INebAKMiZ+a+vnPO/c75bvL67MvJp2exWOziOZpOTr+9TSZP
v79/gQ4fEhefzxPxj+8SX+Pn8eSbszDsFRov0YB786LZKIIuPGJmg5bRsjnE
rSZno8U9xMeFmgFh4B/krEsY4+0PDvSDndet02IErf5lmDCMfqycCfgxDq/b
RgcbGMB1uKtTFXsfg1B0exRhta5Y76/09XrXFUt2+bt8CqPyADDqztsUB7Xm
oJwnAUmBTOH6pr0MYR+SZKE16VLZbAYDBHaLYeld+UTpZ0do0dg10TG8tVZN
X4b8AYTpjnLP5vIYwUX01rCOKkX2RGkOXwRpLGovVGkezRuR3cAhRWRwRrS3
om4lnA8kCIc4joOGqEvmn1YUdgH9EZbKgLulpz4qpoNURGROu4JKmFKpDN5C
lHNbETUngI5Uvf0VuNAgctlC2wi18HV5tpjZcNXvILJNA5RzRGeFHNAcjjRl
aE3GUf+zBpW+wgmQLxCA5u3FgO8Mre1Dlmkqe3OJ54hUptiTFX409/ytNGKR
LDWaVaaYozl93OfGxshQBMVwZLZaY1Behe1rtilIy+kD3+M4vt0VZOGBVzRZ
6D9KU1OzRbEnKJI601VVFUVF1kzHXdrmErrq1N69auA5rhVstfUWiyNfjC4t
nNXT/7hXbx1Bg/BPuA93vwHn7u8U
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxdUk1P20AQRT312Gtv7b/otcdeqfoDQFDUC5WgUtVf1UtjIHGSTcgXNAKS
GCfY2LEXGwc7CfauYzv+yHYdNwEx0s5q9r03Mzu777e/b359tbGxcfiaus2t
nx8PDrZ+fX5Dgy/7h9/29nd3Pu3/2N3bPfiwndLe0fWWLrI2RxPEoSxppo0Q
Rg5JVgDPcVy/zwvGFLmu589X5+altRbHPprSLdNccDF5YUHqcPM6I79Ezdbo
KVg8U6mXhvuMt1iQRZISxhL/t3X3jB6ntWl1qPRLv+vjDFhC8bJaKJpiI5cX
VsnXRR4FYrRAoZd27scrKCLkXiS4AEo9qiXljhGtBKESEreWA1ee26o0K2wD
JsvGyKhDJ1Nn8rla/eicqZ9V2PYkFficSn2t3ADV0slFo5TvLIdBEo3HZM4X
8wBUiyegKGf5E4IUAd4286B8cnwMespTr0av0wbMn8Jp+bTczU6TdAu65xfV
co0BTbZa6sYkSBI0gkqgt0/7AybXYoOHBsucT4b6varcOx4mnswPACvasdFr
MOy1ppi2RxOpztiaEetWezCkTguArjXPyigSrzq+LkPNm8nts6aybkm6Q6Fj
WB69O6wU8txqvpY8sKaqqGgwJHf14tGZ9/8aNtRnk9vhUBAlXe1f1WqC+egg
7HoT+wFrHD+4FvnBUNdublQVQqipCrZnZI4iBA1TkqCsjPE8ipMoCuljuG6Q
PVqAJtZIx26YRrobeH6QWhwGM/qZ7enjEun46cyiwHPTki5GeGrb2I/IzfqP
JVEch3PP9/0ZpqR/O+Puog==
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJxtUk1v2kAQRT312Gtv7b/otcdeU/UHJCqNeqESqVT1P1VVA8WxjW2MgTRQ
KIlyCEGAjU0w4LDE9rK28cd2jUMaFUbakXfe+r23M/vy4NPehyepVOroKUl7
+19eZ7P7X98+I5t3maOPh5n0+zeZz+nDdPbVQXzsBVnPybIs2zJNYExnhjHV
JpoqK4qqaqpmQYgcZ2GaaIUxjlwHQhvaS7jEgWOB29ntHJge3hERmgz6E2Da
4TYEpOZgrMyG9qawQa4E8Xxku7Pp/AYkxSiK/w+rIit2IhxCfST3lVGMBLEh
wAki1U44oKZ075lC3OGpar73IAk3Il6tlJNY5z9DBJsJLM23kj2Kk+7HIj7u
cpTEKziIWS5VkrlTNfa0bNE83YxZnV6ZZq8XuF7mmnOMFw1GlPqxuV85WuCY
31P2wiVUuCcw5XMLu5eMIBby/HHxz718q8hz7fmCqZW+/WzUf1xcXSeA1xCq
J9JFRTguiOz3um2vDHI3IqmLXPWkWMnlK1JB0qMwxCC0Jqoy6PBFkeaqbI0/
1ROO8VAZmwj2z8QSRbEM291MS7lbXxPP20W+dib+a4a2+QItSgIPdbRuAYm4
7x7anmqII3/tegvaEaZlk4dlJWcDDyEHOa4Lkaeqo6EiG6Neb3gz1mRZHmra
eKIbIAh9f+VayAt88goRQkvHXfnLcO1nZ8BHSPQYuLMdf4d9MlM78bWF/gU+
EfUT
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJyNUkuP0lAUJq5cunWn/8KtS7dj/AEzESduMGFMjH9KJSBtuaUPCkih4BSY
AZRneRQoVKAt0EJ7bAu4YTF+J/dxzvlyz+s+v/pw8e5RIBC4eexuF5efXobD
l59fP3GVN6Gb99eh4NtXoY/B62D4xZVHe+aup+6SpP5ROu2Wh+bvA3TN0A+i
afrG3NkO/Ddsx8WZ1dr7x96Bk2+o/mM5W8sG2B21QafVHcw3AGvr5D8y9X73
V60z7ImCfhZAV4atIo5uxeZ5SlORzuS4/Mh/z7GsrbE+OMa3OYYRatVKT1nN
5MF4MqxInn1XTpIcUTeNUbss8EJ1MF/gicYfgCbL4JlYW+5OejIvMlz+bkSR
RGEy/kGQ8a8ZabVyQM1lUgmhU40mI6gkJOLJRHzsx2tlEYvdTdL8N7HWyGPf
Ebr3C7NTLIVYecLwmmYpJTxGUOrGc7Qpgo2UN23OsW1QeQJDLKzBBjvLRGlM
diopjzViSYbm/Hp6iMQxwYIG8rQuojNMyvauJSrBfOkA9DGvA30GS2cRvwSY
8ckUTi8ADNbtN+xrsQhdSBdKBY5ECBe3ANuq/7LZL1IxPBqJubFIWvXTPnZ3
U6fzPyulTJIki+eDN6UsnsxND8p2q69NU9e8QWhStVgU/Tp3MBrLirrUtFl3
IA2Go16rPpNn04kytnaGDTv38ziLhbE23O+4Vsy56izPp/wQHPthzoF4quIv
4qXpnQ==
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJytUstu2kAURV11mW137V9022W3qfoBiUqjbKhEKlX9rCqPAdvgF0QlMaGy
oYRAbIX4NX5h5BgG23hqcPNUljmjO6O5c+/cM/fMu+1vm19fFQqFvdfZtLn1
40O5vPXz00a2+Vza290pFb98LH0v7hTL77dXYW8ze5PZ8BHkHKOLfh+/MJZp
mubr05M0TZKHToRunsmPA6gb5mOfDU3TtqFm+fM738KHJnRsC1rTeFUsjSIU
+hMoSyetM3ESJLeBhmpCTRF/05WjKlUHdNf7fyB0Vdd3a5UjQFIEYKpE21rx
xpjhT3o6T5AH+zRHkFW6AoI8gyMEpcvVGEbQZkvsDBmw5pOGLOjBRoNmmxJE
K4dylvdCJlkDMjzHt8+HQ+UyjpGV3yT9EucyTzROzcg3LfP8yjPy3nSAkUrc
Qb2Vl0SePdD00I1QW4jwgAQEY90+zPVUQ1LtloLxNWAalHzfsPl83JOPfYxD
dp8gTp2MUoLnsxW12QKKGUfUJSmWqvxZYKyLoxivi4dr0gOmckhyLAmYw06M
w8W9YGOhzvNkrUUf209lCzq80Gk2++ihlBhH8TITPUHTOzmwY0HbdKbyUBt3
/xouhOroSrtUjMnC9dJpaAc3jjUNvMn42jI0fQxV5Zlf8jJIk3xkov8D0t70
pQ==
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}], ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJytUklv2kAURj31mGtv7b/otcdeU/UHJCqNcqESqVT1N/VShWC8LxBMKIUo
pAkEgkF437ANBsxiT8cmtHCs1DfzRvO2b755eq+OPx1+fJZKpc6ew+Pw6Mub
bPbo67sDaLzPnJ2eZNIf3mY+p0/S2dfHcdpLqC+gCo+dVqvd6XS7D4/CQFIN
2/Fcz3Ud8C8SBhNvvyIKPEOWREk1x8HWt/Q9W5NlVVcdxw8TVxD4juNZoqJo
1mQZ18EdgYmuqJokm+54DzMEumy485m//OtcbIBWIIx2+MB7CMLVTlqnmM8j
RE3eMNlGQquJfiuxVAEha7+m0F7EKBDSb5znSjmc5Vi6yN2PAFg/4TeR75Uc
Vg+lOoITVAOmzhNuUx6/uMQEB6xHLRoplE1YkrwgYDRClBOWMzZfoB+2lG5z
zEW+Db0rENEERTU2LwNwjTAIOYEc4BdYjiJ+xoGpvQzqFEPym2KXYlDsJr6p
t5JZ5YulGvwWNLs0gVLDODAf3gl8hWBKYzAG0bjG0CTvxUnRbKE3izhB4Dei
ZzRpnER6f5o3bbM5ssxdVjn0HKOQ3qZ7ydFlURTHKZLECVLc6TYAxl2Zobki
X7mqCsbEX++ORvP6x1XtXnQ1S1OMabg/JU/mbGSocq+vOp6tq5qomrapDPpw
Et2RqSlDXeoLA1EcKuJgIMqyYpmmZWgK+H8SreN52Vlb+Q2wy+/C
      "], {{0, 32}, {25, 0}}, {0, 255},
      ColorFunction->GrayLevel],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
      Interleaving -> None],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{25, 32},
    PlotRange->{{0, 25}, {0, 32}}]}], "}"}]], "Output",
 CellChangeTimes->{3.7771134730776825`*^9, 3.7792978916257167`*^9, 
  3.7792979967186337`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"21eaec46-857e-402d-9c04-557a51b5ea97"]
}, Open  ]],

Cell["\<\
We will encode the 36 characters in our alphabet with 36-dimensional one-hot \
vectors. This is required for Mathematica to be able to guess an appropriate \
loss function for our network.\
\>", "Text",
 CellChangeTimes->{{3.7771126868659787`*^9, 3.7771127163403673`*^9}, {
  3.7771135670899496`*^9, 
  3.77711358390394*^9}},ExpressionUUID->"836966f3-8ce6-416f-86ea-\
2696a7239b79"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Encoder", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", "CHARS"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Encoder", "@", "\"\<f\>\""}]}], "Input",
 CellChangeTimes->{{3.7648540809867916`*^9, 3.7648541793247023`*^9}, {
   3.7704533803066607`*^9, 3.7704533891589684`*^9}, {3.7771116270895357`*^9, 
   3.777111637895519*^9}, {3.777112579555561*^9, 3.7771125901629777`*^9}, 
   3.779299645291341*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"bea19505-eab0-41c9-9d1b-cdfdc8f71729"],

Cell[BoxData["6"], "Output",
 CellChangeTimes->{
  3.777111638123521*^9, 3.7771135954203663`*^9, {3.779297950529174*^9, 
   3.7792979715968904`*^9}, 3.779298230193184*^9, 3.7792996458208885`*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"94e40abe-0111-4a72-902d-20b43c5fa763"]
}, Open  ]],

Cell[TextData[{
 "Finally, we prepare the new dataset again in the form ",
 Cell[BoxData[
  FormBox[
   RowBox[{"x", "\[Rule]", "y"}], TraditionalForm]],ExpressionUUID->
  "5c3bc31e-c5da-4978-9de1-4127f2505a9f"]
}], "Text",
 CellChangeTimes->{{3.777113610803383*^9, 3.777113620000369*^9}, {
  3.7771136641311007`*^9, 
  3.777113670114149*^9}},ExpressionUUID->"c0921143-f4e9-4285-ad2b-\
66f2963ee135"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomShuffle", "[", "l_List", "]"}], ":=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"l", ",", 
    RowBox[{"Length", "@", "l"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7771112403009467`*^9, 3.7771112548715734`*^9}, {
  3.777111328750744*^9, 3.7771113337667236`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"edad988c-9ff0-40a2-b7fb-3854db10dc87"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrepareDataSet", "[", "dset_", "]"}], ":=", 
  RowBox[{"RandomShuffle", "@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "@", "#"}], "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}], "&"}], "/@", 
       RowBox[{"Transpose", "@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"SplitImage", "@", 
           RowBox[{"First", "@", "dpoint"}]}], ",", 
          RowBox[{"Encoder", "/@", 
           RowBox[{"Characters", "@", 
            RowBox[{"Last", "@", "dpoint"}]}]}]}], "}"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"dpoint", ",", "dset"}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.7771117841864986`*^9, 3.7771118810659184`*^9}, {
  3.7771120705209613`*^9, 3.777112071768987*^9}, {3.777112413436943*^9, 
  3.777112429084005*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"c8068e84-5e3d-4490-b7df-60d33567aeb8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"PreppedTrainingData", "=", 
   RowBox[{"PrepareDataSet", "@", "TrainingData"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PreppedTestData", "=", 
   RowBox[{"PrepareDataSet", "@", "TestData"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"PreppedTestData", "\[LeftDoubleBracket]", 
  RowBox[{";;", "10"}], "\[RightDoubleBracket]"}]}], "Input",
 CellChangeTimes->{{3.7771119204589324`*^9, 3.7771119501053815`*^9}, {
  3.7771120024224186`*^9, 3.7771120075924087`*^9}, {3.777113784448327*^9, 
  3.77711379145533*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"8d3ddfd3-0382-45c0-969f-737e60e5a9d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxlUk1v2kAQjXrqsdfe2n/Ra4+9puoPSFQa9UIlUqnqn6rUqIS6gG0wJS6m
RSEKBEEwttewdv2JvRgw9tRASIE8aWa1783OzO7O8+MPh+8eHRwcnD5O3OHR
p5eZzNHn10+SzZv06fuTdOrtq/TH1Ekq8+J4GfYssaeJwQoxxCHAHNVum0wb
thABzAAMjqLzAoFdxDDvZLn898sA9uHUz86pfGO8ThHd8xrHVK7YkrpJEATr
GvimXAdYTOK9PIOSUG3Em07+o1Wo1viGIO1XFgqVBl/mWWW+c8YRvrSa+dov
unFHLNaL0aS7Cn9e4yto3c/KIXDKHII6U6e/tjadAoRQu2B4B0bFi2Ke9rbL
sqXfEol4JsfllMW2UOI7Q6VDcTmam2zzU6ZLxu1ika1klem2gFgPostv9A+2
7OwIPRGgTZ1RVEGSXTO8570+AGnxP3NsC3Qb6+Gmfldaev86yySMD5aM3dWj
LP6I6wBCllni2PZ9yyQRTGQH9jFzDXVoqA+F2NeR3pP1XXbh4yHS9WEfozsm
9MbumEx9W1V0xxlhImm6adkGkm57oqyOTA0pBgmsYXAtiqIsy5KCFAVhbSB2
u7KGJUSquo4x1oLpxHNty/Q91zAt3DdmzF/bn28mJo78OAziaDpbSJUlGe18
BKgDl4jCg3sAXLXnEO6PdoJJczWl/wAjt/lN
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "9"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJytUktv2kAQRj312Gtv7b/otcdeU/UHJCqNeqESqVT1X+VA8BPbuGDACUGh
5EEgwcZggzG2MX5gG3u764g0OfTWlXb0zc7rm515e/Bt78uLXC539BKKvf0f
74vF/Z8fX0HlU+Ho62Eh//lD4Xv+MF98d4Dc3sD7Gl6Qgv91nM0/DDNpbj2g
GDyrNwkXmrmJHm0JANsggBKk8XKmaV7mvv0bEEMlCVdTbS4n2UMSO3EGHpwc
fTYe+9v4SY0QwIRzgWLppjRVrChJQYiIbhxk1XmcYeVwo8n9U54onbrAH9SR
WaZLND2BFe1RvUQciyune8WepRHoMXgFv0O8rDKF1QRWuN42bUj9N4vTmI6S
RhyGkTjVVsAUqR2WpHENIZsnOILuKnMv+wWRIUlqidCSO2GpCx8EWXxSY0ic
y3o3+BJe7mdtIFFhCKyOkCdW+Co52LXu4gyJNaGPLB6zYoOTt2EKIhi/LlcI
rAXAvEzzHZJhVBTgIyodEq+y1rApnJ03uBaN3nw0Ca99UiZLFI5xDaHK8DRM
mrj+2g2MLsfWxSbHVKCRIpgU8fPXXhxILap1XqVplqUqv/BaRsoLDNfXLsSb
vtC+lORLgeEaYZQkYHDfu+rL6lTXZ6pmLO47tXZLV2aK2r9dagsviS19MZFk
RZmoo556Iw1uYbaFbO/mmaxN0xwZg8kYfu7kWnmcs2sa+lw3bB9uhjR0I7QR
K8c0rZUX7RbCUB2Qand2vAz86OkmovFYo6Hu+n74bHf/ANeQ6Zk=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "21"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtUklP20AURj312Gtv7b/otcdeqfoDQKWol1SCSlV/UqUiQRY7tjOxyeYm
BQwECiVkc7wQL3Fix44dL9OZhNIKGOnN9+Zt87aX659WPzxZWVnZfoqu1bUv
r7e21r6+fYYe71LbHzdTG+/fpD5vbG5svVrHZi8QPUcE/5754h7xoAUfOWOh
piCI78snx5cOguC+XK8ejiBMooWPfycO643DKcYl1Z2l2O81j0QX2SeIcCyy
PsHyROIb3RlioqVdEueJmo2Yo33u4OTXbeLYaZ6tkUICGzt0+aBWWoQNo9CP
4bzC71Xa+zsFoV6pX8Hbv6MYRgKRa/Dfauc/GKo8xIpo5iUYmXSjCi7gpECX
9g38ddSutXCDCA7QzRnUGQZwFnRh2AZpgjEgBBwFOhAO2EK+gsoLLzO7Je47
J84yVLUp6pNTUCSPUCfOcmSRolhUKX8imuqlCEhAtaArkJkym/6J0nZCGIZz
V84ToNAane+x7G72DKUw6y2LtTmmAIQDiqTz7G88jUiyF2BXAVWo0hTIFMVF
06VrVMw8gkqRztFcjt/l25qHQ/RV5IB0SiNNlTiGLku6NPLm0O8idYQ7IBWJ
bJY9Ro12x6YiGZJ7Nz+5RHQwE1uaJHeN8N/EgzFy9cbmQLe6F+Y0iRe7Etv2
bOpYoaFZmjPt9B1HUdThUO2pw86p0HMcXRs7vqeolnndGUiyPFKuWgPd0GS5
19eGkjKQFVm5udFNO/C9iWXqTjjRPVPUAy8wxt5/C+nBKEDbEziO98gCqwPb
C/yH8uQc73vyUOE2NQx/AF/A6Uo=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "22"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyNUs9z0kAUZjx59OpN/wuvHr3W8Q9oR+x4wRnqjOO/5IwHpJSwSUiANBCg
LdBCcRBp+CkJIeR3IGzWTVK1I87Yt3nZ3bfffu/le3l68G7vzYNYLHb0EL/2
9j88Tyb3P758hDevEkdvDxPx1y8S7+OH8eSzgwD2BPtj7MPh6HYMvvcD+9aL
zDQsMxqGYTprD/ro3raF/j/gPg5tEPIg2uLJhwipq927Hn5ccTiRjfVtxA7D
vZq4DRaqNBIlCyEFUyCrQfJMhmgYIXCjqdK0fzNssmU+B1IFgU5zUsSxmbaK
OYoERZaiT9lSmSFquEx8sLyucjygea7SHlSpLFcT2igoXT3L0RUy+9WWulf1
rHBRoi7CYv0rslAuyfOJOBbbJcDw/GkPH8Ct0sLUdLY5W2hGJ3XOceeNTtfQ
lYnYvywRJ1yKc2ALlAu58szxFqOJNFdMfdJkGZKpN3mazVemmN60oBfJMKZp
APIsSYB+sDfDKAxcbtAsm85wVayCE35EpC1Cbvvzp6IARni5RtovQTHhTYGi
CVDkBlh4pN9RW8iQaVBhGD5IbgXNifjOvpxwgBEo6tLA3XT/XKgfHwOmq8nX
xl99czt5ou7gebelq7l9B7c2TdtxsUWZUPCnwI1tT3/MF8pqpWvqTFHlpbI0
pdlCFgdjd+PBELlFGx2XY7lIM92Vbu9m+p/58H44+Bv3E1yC8A0=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "31"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtUktP20AQRj312Gtv7b/otcdeqfoDQKWoFypBpao/KxDj99qOH7EDwU6A
1oiAkzhvHEjiOCaJw3TXlBRQR9rdeX0zo9nv7fq31S8vVlZWdl7ia3Xtx/vt
7bWfH19h49PWztfNrY3PH7a+b2xubL9bJ2lv8HmNDzzILL2v8+I5/EcGttHC
z+K5f+i4IX6mz/1Xuj0AuCNF7x77HdkhufPHPbHcaErtQY8x5KFPZDvDVJk/
LV+jpd7SSP5N5ZrOeGnMl6BpOWP273OfTn8iaYYqWK3bGJ1eL9LmCYygqxfb
B4jh88UcJeZkVCZFIxB1Xr0BmeJEep/nFaHICcV0JyyPTpJEZWmOkxBlsmiX
k0m/GWe71UGVomj9cgZJ4Ih78l4JBzz7Fq5qBUpgtSYZJDQoPasB9LSIWA6n
cegyxptL8hlJMAAupHRbJVqm5dYYr2hhUaycxwgr3ZgpKFnj+qYaTEaGSEsm
QPOAFB4ZvMKUAbqh95uWaB4jzCO4m8KQUyXVwxmTCDEFXvBhVL0iiIBFyPDI
J10IrLxvNvptPw102exulmVpms8xHJUteSeVDpkWGkgUJQUxrMKJCjIbzWK5
Ey0SiC81lpGNvCJrsn5wXBt0jr3hyPcD/0g19UKpXNA067DkBf16pRX2zlz/
3DKY/Zx95p7+ci+qnWGv1vQHzUa1VykcqrmjSr3e6HbDcTgb9QYxTPvRpGHR
GcGNYTaejP/SczYmWttGsuUtCQZBMJ9Gk5QM4YIQI5mmXIjt53xP7gnbNtOf
+QPTqN6r
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "16"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJydUktv2kAQRj312Gtv7b/otcdeU/UHJCqNeqESqVT1R1VVAgbj1y7m6Zi0
SkVcCARj8BsIJjziJ9s1hCqqekj7rcba2fHsfPPNPj/4sPfuUSKROHqMP3v7
n16m0/ufXz/BzpvU0fvDVPLtq9TH5GEy/eIg/u0ZtqfYpPaV3Ovs0LuDLMuh
5wVhiP4BDkLR+m8BqAUIxZHY7l8Jqp0A+XfO79S1v2QzoB+iCDu+M7F9142i
ha0ZuiHQdFnFx9NLEZAEALVmfzAcGpYjl+ncd29t1Ik8w7HZDFmT1Hno+2gC
CbLUbtYLVO2bAAFDQ7G7iMv0aarAnAEIIA9ZEhYyX4/Lw7hjsSjkCYkBHMO3
XIQWcuXkuI7poEqxQlO4Dle52DLV+AxVxSx5AGgOcnmmMd6ch9MLhmvgDIbL
sQLPFkhxFIZeHLJLjekt7hwQ4lWFAqzQ7/3UNJzmyzMcXkIGWvMqDaA0nyqj
rtS1V7EMSCQoCSGJzRGtjda20u5N/JVnFunzOUI3Z4UTwdyyWpr6yO40hUus
4BKpIpPLdXbaLtVWiQ0220jhCZqnT76c2kGs/cyKbw5DXE49JQmqmD2PGa1x
G94uPRr94Ihs0/5jwJvRLbqihx6Atbu6DXzfd1dudO81RAMFj1LvKro+kBVV
VnXdsExVM0xndjN3rp2RYY6n12PL0hVFN3VF1R5S7b+wDrcLv8BfgWrpHg==

       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "3"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyVUUtz0lAU7rhy6dad/gu3Lt3W8Qe0I3bc4Ax1xvEPuXJ0psVAEggJuSQQ
oK1UqDzDBISEBCjcQN653gB2OtpF/c7c17nnO/ee8z09fLf/5sHe3t7xQzzt
H3x4nkgcfHz5CB9exY/fHsVjr1/E38eOYolnh1HYEzwe46Eog53JvW6ETnsL
E67MrUFoWo4XhOje8P3grvB/XLpu3p2gIfeVMbzheZ6321ZG+qDd7KtL0/aj
c+DvLgY4u2t0m4o2MqB3K9WVu12nza7c6w8Na/OL0Hf+BAyLPxq1ilS9bM6v
5/PpbIpQxJf5LMfxAOTzBfGy0RoYqzCIKqiQJYohgcAyPGCkny25Y+nIs+Yj
nmS+UsrYmHRFJg96NuyrLVUdfpeYDM3IhgZDHRB8vh296dQU5ZyjM3R104B1
lQRMaftd3RnmU1SKKZ8kSRbkchxbCPGzbt1B08wpm0l+4gXM5DmCkKJSdBHX
RqcBUywSFHWaYgWev1oFTtAAKFwANkv0/9KifI6Qmf0s8eKNa4U1Q1DooSWS
UzRDlnFnEbIddAExecxGXbYFgqSpk3Tdtuvp5Jce9v0CEdlTq1QmV6S/URSR
KYkLzO1wu8Tdi1IOiIJQLORKk43Hsi2sjwu1llCRctxZ7WynxECdzKfazAvg
eDTE8mvaZGLo2mzp2t5GZ8e3r6HrwqW1Wq7XC+u2yvcElvA/8RtQeev3
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJy1Uktv00AQjjhx5MoN/kWvHLkW8QNakVZcgpQiIf4Tr8ax49ix13HdNoGQ
ikREhTgPO4mfSVyHOI/1Y1k7LdDSG+JbzUgz++1+szP7cPfF9t6dVCp1cBe7
7Z1Xj7LZnddP7uHgaebg+X4m/exx5mV6P53d2o1pD7Ddx9a+hu4lZFlG/w3R
35ngjyBEnnOTsPKgZ46Mfu8yjB30kXphK8N2S1PtH1dEvQHyBCW2OorjTCMv
uXDtueoZR3OSyOdo8NXbUG3btqyhXOMLRYbKibn3fMvF4lFQb2uuvwYlluab
HtKqTD7fWMY19hTZdBUW5NgTiIte14Qi0YcIoqmtjpRTUGIISXZnCI2O8uQ3
LBFXFVoSoIRDofDp82LVIQugvkRomBTAszkg1Sjig1ipkuC0ggKzHOINjS4W
RN3qlpm3hxIQQA3Nemx8wuI4TsLSptpg8gwvnC0CeI6iCBkiKAharOYrlWq5
0m87MNHwmuANdTJLGobmx8dzWx4oSVNWZY4iwfly0wzfR3BpxbMJoPJFYIFY
IjBpjrfXv8cwEd+RgsDQJF3Rbkx0USOKH6sUMG8ZeBfUj5rhtRSEob9aX+Ui
/CbkXEzGE8tQlYFuDPvfNVNVbcdSNAMuZzNvYY+nY8MYu/pIt7RuZ6Bb+i1S
/4RfHzMKNisMw5/GzO6l
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "5"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxVUk2T0kAQpTx59OhR/4VXj17X8gfslrjlBatYqyz/lAeBfEMILCndRZZV
UBdBCLCBhGTzQSAhycw4kwTKnaqZ6u7pfv1mXj89eXf05kEulzt7iI+j4w/P
i8Xjjy8fYedV4eztaSH/+kXhff40X3x2QtKe4P0YbwgRWaG9Wt05KF0Q/b8C
89Z0g3uhNCHa6it9Ze+yWEROAJI7YM2VpbMvCkEMDqWWMl7qmwQjg4nSvMCY
G6qGYmx6wT0KIDRvUZjlAwh2OAfuEXHbLekBM14guwAo1ioUXb/ZYjMtzUCD
EcvQDYX4G9XcHah5PYGlmzOCp3+tsuIYoYR3LDH1sgAJsUWtVWU0RJ4MoSdQ
ItUk6GhUlbmak7aAJk9VmU7iXAtypRUmbBCYchTPDZNSWTgvtUlUx8z7DM0K
WsJMFKTPfWyYlxDFV1WaEdYkbnK8wEyw0fm0Qzu5xtACAUVTlqnUdYjcb2Ub
OBzFUgKAWNEbminLVoT/xvZ99YIW6fqfdRT4UqNJtZNKtPHtHlOq0DzHcFKt
JpYuUh0dL5g3q40vjRrHURxXZ9uOt7FDGAPgjWWRqkjdS56nRf67t/XRzoWh
67ix1pUH62DRonhpSP4jDNTJr8FcVX7/GKir2c/zzpViLfS/hq1NxpNJfzAz
jIVpqIOlZq+nWgAyTobhxdhZ25kklpJNjXuHdY7iLDy8Hu9HY226CPmJve11
V/5ezMg20ociezKyDqOE9Qk8j1haFyuN3H+RF9Gc
       "], {{0, 32}, {24, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{24, 32},
     PlotRange->{{0, 24}, {0, 32}}], "\[Rule]", "21"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtUkuT0kAQpjx59OpN/4VXj17X8gfslrjlBatYqyz/lY8qHkl4BVjWlQ2s
q+AiBBLyJCQhJGRISGgnQHahtGu6u+ab7unu+ebpybujNw8SicTZQ2yOjj88
T6ePP758hDevUmdvT1PJ1y9S75OnyfSzkyjsCdbHWGENsFrDGrt/BKH/gLG4
zgqtsL/PtL3ICtUM6fgHoZxkuQASTRYJAVeL4TWs7Ik8d/qN2vnn4Q7aHXlg
TUWmSGQY/e6aMIgPJ5IkOLvwECDw4kxd1ac6CsKDvrCYlySVH0qSYt1BAQKc
JpWzBUqbGSI/2Q1rjsa4wzWbz9DlJd4bHCdpuJjW/k1HTdYpkq5vYoO5KvPi
FdFDRAMXowmSbsJ626QzaF82x2qO8mFRyJHVblxWvPne05QOWfFClcxSFT66
CC+x3sWTmi3qPACezFGF6TZ+ctF2oyk7pRuAfj5XotwNPmA620piYwbwM5ev
FDZvNGqJkV8iCJvYM1mCJiNuWleL+9cAUKrl7BcWs3jd33smPJZcKtE1PuTY
gY2BmEffmXc+fS1ejMU8Yxxw64N9XSvQP2rf+o6HVnsnAdgSN3IFzrCn6tzz
d3xIKqtJhjXHIwgiJxumoiiyIssKy1smbyxMby6NhpwgjtnhkB38GXIRCb+U
YJMf+q5jL0xdU2RRgLDLsPGPWdoYneqmhUJw203Vj8hzZppuWAs/3EWNblVs
ejOw0MLf/yAy1lnvdoI85B3M9xfoAfgb
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "9"}]}], "}"}]], "Output",
 CellChangeTimes->{3.779297978368715*^9, 3.779298273455476*^9, 
  3.7792983533814325`*^9, 3.779299649974834*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"2f77742b-e1c7-4ab3-9035-a830efe59291"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PreppedTrainingData", "[", 
  RowBox[{"[", 
   RowBox[{";;", "10"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.779297923204259*^9, 3.779297925874116*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"444574fb-bd3c-4a2a-ac3d-da9e6e15d6b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx1Uktv00AQrjhx5MoN/gVXjlyL+AGtCBWXIrVIiH9Fn37E6ziJ0zzapkXp
U2kSW87DcRLHXr/W9trLOgFUSjvSzO7Otzuf5tt5vf5l9dOzlZWV7ec0rK59
e7u1tfb9/Qt6+LC5/XljM/fx3ebX3EZu6816du0V9ZfUIXSgbY8nc9uajjW9
rymqqmmqqkLX9YPAsm0PEWph6Pmu7wa+R3AAzalh6PpsgTywBLuTgWZMLIj/
zWfBG+uDa0U3YXQPwfECd4Np96Y7tuYPKy7u+ka/pyrGIpGi1GwCTqzU1XTx
1FBus03mgyLH8hWx0NCXj03qMeV2GruSxBZLeeF4WYSghCQUMOWdkiReAYE5
LN2GWY2TNmVMEtg4ELjjmNgnuzu1UdZMUTqCXofMfwrMwVGPJgrcnpwRcPs/
6jWRkKHMsPmSS4hRrnKDMEIVwOQZUSfpJeDZg5aFg/MaezOY9AEvgz3QJMRt
laWyUB93OuVzpW9NDktKC7CCih2lzHA8f9U1OxB5JBVv43EzzxabPb0lMECS
0VJ9H7Rh76paKZYuDO2sWpTl37JdlDvDm+FQlPhCowo4ab9mEUjFDPPazKGN
62eCUGtUC0y+lSy0u+P9lC4x8dt1ief43dNpkkaYzC/4pewknPVOCwDc/f0a
//4HJ+kj4/CfoRAhFFCiTFGMXeg7pkcS5PdH+khTu1p/MNLVa6WnDdW2Oh3p
kyAIwzDCsW/ZEY5QGMURck0Hk+gpjiB5AvCC6HEoDDzXdTwPYbKcoz/2C2CW
7CA=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "19"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxlUktv00AQrjhx5MoN/gVXjlyL+AGtKBWXIrVIiL+EEKJNk/rROiWukyYQ
FbUhj6Z1XnayiZ+xd+31I1nWThoKjDSrb3e+mflmd59uvlt/82BtbW3vIV3W
Nz48393d+PjyEd282tl7u72z9frFzvut7a3dZ5sJ7Qn1x9TJyqbKdbsj3w6A
bpmWaZDZXaBeq9UajXprqBm247jB3fnkQluieYxdY7yqdNmckf+MHqGbJCG8
F8RJMiH6zW34h3gv3rkdlauUsuq5BM5VpyRkpREh/3TqXqrnEveVby+I86R6
CppKEFSyhZNPxWARWDixanSPOiLLFwQFp9xxGpLLiyF/sJxwUEMUxr9ChxDz
wlzkRt9z3w7P2PpKa0WnoxcEsXjK5YVCtmqEcTqPXKnmM1KezfGnx5lDRlQD
qnpGelfS6blY+MxJ4gnHssXSkJIj6g3p+Ig9YBgml8mc0ZpeqpOQ1lGGL4hc
Uapbq3mRJydTizzDM5VEfkQrxIhMdbNKUUviT/JZoTQhoY1C25yYbVmRqKxr
QC738zwnlBsDVR3qUEPEltShNQgIli9yPMOVZQvj9HqnZ4pW71tQH8lFtlQV
xe6yu5yZDPt4DnULzSdN7kvZXz7h4NxW68AE/VYPEq/1k15pvMzxNR2oCujL
YOxH0HCj0KGGAgJ6xrDTbrS7ykgdTCB2wXigKJ2eAmQAiQ80R9d0TQNjSCI8
J9Fshn0H4TCeUwuhbejaCPqp4K7pYRwE2EfYQy6EHrQtmLx7I0o+k4egRw0i
D/v21HZxRNS/flEchVGAkeu48DcMau1+
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "26"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxVUktv2kAQRj312GOP7b/otcdeU/UHJCqNeqESqVT1T1U0wQ/MYmxDGwko
kFRNQsKjscGAjcFvGz9w12tj0ZF2NTP65puZb/flyaejD09yudzZU3gdHX95
XSwef337DAbvCmcfTwv5928Kn/On+eKrkxj2Ap7n8Ox2UWyeKstrLUpsFx2a
q8wU3f0vlQB8W5IlWd2mOT++wwAFwWbKL41tVuCgipjEXUtzYWumLSDatvcg
S1IWm33gTe6g7yd9A22+zwss6PFxdZgQp2m7fV6usa0VojxYYFrDqhSuwzQc
z8rSRhurARyU8Qpoi1Gkry5TOFmqY99YmqLZam0AaW5Qoy17wZyTfPT4o9TA
2MsHSIDgAxojiV965KujBqCYpp+01yi68p1FI/s0V23QBmLRby+YSvnajX2V
4mi6aaLlJgygCQ7CYfldvQJKLTT/po9zBBi48ToG2yDI8jgRpokzGGwa5weV
WhXvxCLtjD90BZAT1DTs0DgojdCmli7xP3sy7BPafQYAvIs0NW1v666WG8dy
rCXHAKI+CaFAnm7EkoaeY7tyF2cB3pEse+dPAzd7zTlFNkFj5nlB9JfzTNWw
HS8uEWmqSl05cA39vjV7HA2HU37GDwWh12LA1XIxVVeaIi5EYSI8jMZDfiWL
Y0FZLeaispYRsyZBRYLAsvYvxfdSx9xA0QI1/SvDzn32aTZm9gtuustsyEBT
POTshN/9aXRgrhFrZ1wTfQjQ/gFNM9Ab
       "], {{0, 32}, {24, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{24, 32},
     PlotRange->{{0, 24}, {0, 32}}], "\[Rule]", "14"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyVUstu00AUrVixZMsO/oItS7ZFfEArSsWmSC0S4p8QgjaxHY8ndhLHTmK1
TUmdFLtuHo6bRxM3j8Zx4rEv41RFvLpgpBnNzJlz59xz79PNd+tvHqytre09
pMv6xofnu7sbH18+oodXO3tvt3e2Xr/Yeb+1vbX7bDN+9oTOx3RCCP85JvcB
ff8ewLKnv0HBkgBE9OPRdbfTvwn+xZkPL51Ob0R5UUCikAQLcgf5180TtTBf
CY8C71fW8Ijd/yQZ7l9KpmUugdWjksiy+JYxvgU62QTH8BinUkjSLPrHuCy0
6L1XYw8wz6eQgDg2pbkwULQvYoVqxZkk2i8SUA5yaR7JRVk5ZtDnWrebEjle
u4pCr6Uw+bySycjFA0ZuDw2EBa4CQGCcRixCUqkgUxMgOBE4AdVpEmBzmSQu
2BNTjiIAV2IYIXdrncDwXJmAydJ7MDCHhZOV1wWU5JkaRE01Ph5KXC59STeD
fIJFWTWukU8WQES8L6dpwq7A5kQ+RWVPV3F7eekwdwhwdaprR9UsMqmeMGYZ
Io/UDpyr1YGekbNSHDRypovoOpwrrFZLSI5bSgpScWWxfuMtuv3ZsGEJqDU/
+8rI3MUqfsnzXarSqDXa5sQ7xVoZdyCIgpl6Xj9rfasuaNJO227Z1umxNbDt
tpHR9cZgSY2fkm6z3h81datuXlSreYmGOzfvyhyG8xkZNfvWd1EBaFQu7ipM
5uPh1WWnP7hZTsAyJwvfX856o/F4NPWWcYvF/eK0JkAaFcd1PP9nP8UjLrlr
6I2e+0c7/gAs/OKE
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "13"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxVUklv2kAUjnrqsdfe2n/Ra4+9puoPSJQ06iWVkkpVf1QPTaAGs5iYmqUm
kAUwIUAMeMMs3sYzXrCnBhqWJ70nzffNW+ab9/bw6/7nF3t7e+cvo7B/8P39
2dnBj4+vosOn0/MvJ6fHRx9Ovx2fHJ+9O1xcexP568jx2sRWq9Puyx15NJnp
ho6DZ6JaY9nbeqM9lCeaZUMX/6f0htLnhqKKfc9DQJ+tK3FtwDOlbF5bI94q
loVGMU9RvWc4dFelBtddhqHjJbiZBt/dY+y0aq0sk4+1N3Ag/CIe8aB5x15l
k4y1xn0lF2f+3GYq91QxHutvEkDhMsWQZLbCkmWC8jfEzc8EEacK9yydyl1t
dcCJFEFmmpVKOk8R19YWkb2MX3RbzN+rXCIz2MIxnSFrcjPH0OnfFf15IKEU
u0inmNm4RlHRAJuEucBk4uRT2C0V0jRZBAshwhUlX+caOGQL1WQq0wnxfNNC
afpYyxdZIlH28I6ZGD+UynSSHi4lXQlrqaIU6Vets0T6do6hhxFw9cmgrxoz
wwlRvfEQo8ZTG9rGdCRJ0lhHUZow5PumRiU4fqCa0EEQBat6j526hFyRVxRn
tzlXrcpjZTTVzF0cKzecjYbco2C5uwTgFXvW63Q7vDpdrBMCE82wkOtPFEPl
u0/DblNSVHWiA63f4weCIE4h9ufzmTwaCaIkqhoACDquH0TqzKGNvMUKBUif
qopo2UtxVNe1bQQhgp7r2MACpqYvGW75HN91oGUCe2G6ETX38dZ3hkEQ+I4b
JVqGaf0DL0vrdg==
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "12"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx9Ustu2kAURV112W137V9022W3qfoBiUqjblIpqVT1sxIww+Cxxy+woYRA
oQmP8DABEjAkYDC2sWE6hqSR0tIzuiPdc2fu+/Xel51Pz0Kh0NFzeu3sfnt7
eLj7/f0Lqnw4OPq8fxD++O7ga3g/fPhmL3j2ispLKu321f3Rm7Xzn6Vqq7bB
bGrNNudu5hFC/AX5G8t/cAGuZaB23Kes3+RlADMSI1z7VCNkNFkF/KKCJQlG
mGNGVsvjgOl3O7WuPb/gTiDDqSlZhDH2gvKrpTUo/7os4ATmwdmELFsnAkj1
N+7t25YUxzib1alXT1VgPGfeRzY1Xoye1Xvd7tTURRTHdce2iecRN8NJ0dzY
apbK9SaPWZhp90tVWtdCBQqf9oh11ykWeIx5rWEBXKK+CjKb5E8bvZubRlGR
xHS+ajACzF85ZQUVeOFHw/IGBVHKKh29jQQWa93uZYpHSEymNcwgIauQmS7G
Mo3+aOroAoQIJng1y3FKgZAKwmVnnfL4VEWClpYSGIAGIVhuEZruQyvnVYmJ
xwRzRWCFtmVQNGzizqmhp0AuktBpBeqALIgFYCno8UzXQISFWjCydDCKagJw
GHOYQyzicHoUOO3QCPPz2DETjUQgYuMgwbXtYMZr6zCXkjFKyjge5fIt/2H+
65RmRT4WA6ymr7YsxCMca2gv6D/Hdb3H10tn3rsyxsbNrWGY1p3RHxij4eh2
2O919Kk/cR26gisyNl3fXziO5diTsWn+J8oWrLYt7BMs/2T2G4GS3TM=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "36"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxtUk1v2kAQjXrqsdfe2n/Ra4+9puoPSFQa9UIlUqnqX2pPCQkY4w/AptQE
CJAPqhgbjMGmNsbG2AaM7e3aWdJI7Ug72tmZNzvv7b48/LT/4cne3t7xU+j2
D768zmQOvr59BoN36eOPR+nU+zfpz6mjVObVYVz2Aq7ncEVrgCwMI2jgX/MT
F/wns3UcH0RbFFl/wQP6xwwBoYkzc9e4dlouVHSAItdS1LEdlw3pInnGeTs8
y3iLpaHdVM+IApU748MVSjBdihHEab2KE3ihcBEAH7UivtVKnZ7CMRiJ50r9
5CwKoauUyJPyGCx6DF4sMk1ecxHdkxaFNwBYcdk8QVI0TjfNuN4d1jCa7YK1
XKJyNEmwJYy+WwIgX4kMUZUgaYopkrQM5hxbl6bqJdH1iw0TIgWMwC5+WZC3
u/HFeqUqRq147rCEUTiLrp13LgRFtRI++nmhkq8mOkXj1o0NgK0lRdfnWTqr
JFu1fmM+yBqQuVylkjAWGjySN5bfzOcZsnt/rqBiN1ZZI/P1720QWG3G2XWB
ZCDRIZUl2Eb/ivt9rxUAzm2yWwk1LMvVmgosQo8eOY5jwJElFsNPG1uA3m8b
gZW3Wnj+7LJMED8HDzfEuY1hL8bt3oQfWhvXDcLdPxP5a34gTazQUfW5Ndd0
Q5FHsqpOpP58rNhR4BiSKI4mo6GsKZIgCIMY1NERfAX7OJqmqfJoBMC4cxei
xMYzDV2HLT0434i33DixsAxjbnv+7ovOFPg8U9EOTG+5CR+NO4GaWJKge563
Bo/tD/TX61Q=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "20"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJytUktv2kAQRj31mGtv7b/oNcdeU/UHJCqNeqESqVT1Z4Fk/MTGNmAD5RES
YcAmNsWBYBsn5mnHj+3aVBWp2p46q1nNzDczOzM7r84+nXx4lkqlLp7D6+T0
y3E2e/r17RFU3mUuPp5n0u/fZD6nz9PZ12ex20vILyDLT+hmT8pQksD/ozCK
7+gfHkF46B6uf8ej0N9Yd5Z591P3Xc93Nyv9VtcGfXWqz5bOPo/eLItd1VD1
uWnaaxea1BBs7tdmG80T5Y6ysOxtUosXXermfG6qIsGIolDjOa4525d4rehO
4H8XUZxlKLpUolBe2YLIBXJP1h+CS4JgKb5eZPJlMVfavwt24/FYIIlSnOOx
mqcKRc1dChhEHrcSReNEx4Atjiiaw+k6hyBJkFzgSaJ705d1tcVyrNCkKkIC
1BGablgrTe50uALdtkBgfItr22AESilx/0YDJfnaJADA3kB9gvB52oxDVzWy
WhF7Umu3gIAnYGKuGo8BSDRJEQNHUwc8nGIXJZhcLxktXUQY7AFOPWhawBuW
sAJvAi8EFo4jZD2JbUP2bA273gIPgAGGF9BxbPdqh5/kVhmWZf1YNNhDYNHi
K/VOIg6oA7vvBa1GW4FNAFvAbWfp2MbtdDIaXl2Nxn1pNjGMSY/Egbva7hxr
aU3tpWXOR8p9T9PkWvHJG/HaQIqiwKjm/7xkwKz8BQB+shO/NjQMkhPCL/sB
wLDpEQ==
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "13"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx1Uktv2kAQjnrqsdfe2n/Ra4+9puoPSJQ06oVKSaWqvypSgsHYiw0G4jyB
KsrDUcBgOzyMMfb6hV/r7gKJ0qgdadc78803O/Ot329+X//6am1tbe813tY3
fn7c3d349fkNdr7k9r7t5La3PuV+bO9s737YJGnv8HqLF4QOtO3xZGZbxlgd
qYrc6ymKqqjQdf0gsGzbm2dZhuaB6zqu47lelgTQNHR9NJoS5KWlEdQfVH1i
weQx5D6B/mQ86nZlfQU1FoTlGUHfh+OHoTHDThkuY0mCVsy5OZSb3QkdLByy
BU/156Z0Xl0mxtHf3SRTbdVWiqIgzR45+FJ/8SW0oUhTHSNeQeEqZ1AvlYoM
B4AgPc6JSHafp3iwf8DSlACq5qIioaaQLuTpMqg0akXAHLSiLAn9IQZgu1Bj
QceP0OyEAnRD0oea0sQDTim6nmdtXDaUmLpQE24UTRcGcWYWi3zh2LZvb+/7
olhgyrofIlE1bZmtN4S21pWmY0/k8xWeyNS40ZQWWwegqRikUaHMnrEWrnpY
62mtar1U05YDC1Wa3Q/xuSTDRAfngOukpPe5eCDkOTLfpZdmzhlXFm484koU
y+fPCMMkel8zbIn9DXGpdkvij/FdaRhnKEsHhwWqWDk94S4v7q5ryjP5jSuh
zAOGE0+PxN7qRRxnHkdIPREqDHd6dNFo276FEtudjUeq3L+67fTvm1xRvLrr
j3qyY00cIrATBVlsPBieZ4Wxh7szgqXs/7QQ/Qdw/Sh5GUPkBww8B5vnhTFC
6fOUP6Jd6vM=
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "15"}], ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJytUktv00AQrjhx5MoN/gVXjlyL+AGtKBWXIrVIiD+EhARtSBPH3kf8DHEa
p1Wb0qRKnKZpUjtN/GjsvBzbyzpFVTlwY6Qd7c7MN/q+2Xm+/mH13aOVlZWd
x9Strn16ub299vn1E/p4s7XzfnNr4+2rrY8bmxvbL9aTsmf0PKWHxOR/2Wj+
j4R1MZ78uS4SR+sWESFx3Hf7Q9ePlolwPF1WxPOQkAEZj4ft7iTw4ipkf/n+
/AE+dMxOXWOzfPoro41IuMQ7d50bCsqncjksMsC9pxPQxBELcowCdnf3FNVL
gjaJKTLQURpJqUxOOoDgRy0mkaktMYacYgqpfNft1xHkGG3QkZVlosxzEAkG
bWmPChyPJL5iJ/GZiBggnibqQt9FBVkWNCNhbEHAYnVB4ogK6wIZ43xFp9wi
D0EsHxAajWKb5XAGVS4ureQtMZyiBktZKI3BvmosvAGhtCsgi5U2HaahZSCA
qEn79Ly6TfrnMCNqsm3CLIQ56XRMsa1jVKXiS3ssk1ehiL6IuSOLkAk5KSO+
Scj0TCjkgaAgDtMxJna+L2f5K3qZyojFPMby4G6Ck+q3cvG75AdnGADIMEX9
/nNbJcBLEEssLggZrvXg2xt59VgSVJEXOFgy7rfEHnqdEq+VUYnPZAun+mWv
b7m25VybRuO8UxP2cbGiVfW2Xm9etFv6ZYdiasLPbtAT0Unfc4f27dC+6V1b
VEvr4DC825qZ79yYhmkOHD+IyXXLHQcRCW3HsoaON51FUbLn0VXHJ+SqMYpu
g3n0cEXpOIjbaA6C8K8wIb8BEl7biw==
       "], {{0, 32}, {25, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> Automatic, ImageResolution -> {100, 100}, 
       Interleaving -> None],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{25, 32},
     PlotRange->{{0, 25}, {0, 32}}], "\[Rule]", "7"}]}], "}"}]], "Output",
 CellChangeTimes->{3.7792983603158865`*^9, 3.7792996540389085`*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"cef94213-20c6-42ff-8331-67357a9fe680"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining and training a neural network", "Section",
 CellChangeTimes->{{3.7771136878263874`*^9, 
  3.7771136930723643`*^9}},ExpressionUUID->"d6bd5e20-0cf1-4061-9d53-\
9eeaa5b8872c"],

Cell["We will use the following neural network (based on LeNet-5)", "Text",
 CellChangeTimes->{{3.777113696241336*^9, 
  3.777113709311361*^9}},ExpressionUUID->"bdb37c47-8eb4-4219-93c5-\
104580591de1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NeuralNetwork", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "@", "Ramp"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "5"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "@", "Ramp"}], ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "500", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "@", "Ramp"}], ",", "\[IndentingNewLine]", 
      RowBox[{"LinearLayer", "[", "36", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"25", ",", "32"}], "}"}], ",", "\"\<Grayscale\>\""}], "}"}], 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", "CHARS"}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7648571516062984`*^9, 3.7648571586853642`*^9}, {
   3.764857213794998*^9, 3.7648573146841516`*^9}, {3.7648573634237547`*^9, 
   3.7648573892387376`*^9}, 3.7648574437409315`*^9, {3.7649132038143024`*^9, 
   3.7649132262802887`*^9}, {3.765020150528944*^9, 3.7650201529418545`*^9}, {
   3.7650202230004344`*^9, 3.7650202286967564`*^9}, {3.7650203311435595`*^9, 
   3.765020333937788*^9}, {3.765020367348132*^9, 3.765020383152239*^9}, {
   3.7650204450932765`*^9, 3.7650204583932457`*^9}, {3.7650205153431597`*^9, 
   3.765020519538312*^9}, {3.7771119621073227`*^9, 3.7771119677023535`*^9}, {
   3.7771137310613623`*^9, 3.7771137444163585`*^9}, {3.7792984003966866`*^9, 
   3.779298418132251*^9}, {3.7792995128291445`*^9, 3.7792995342563176`*^9}, {
   3.779299565184595*^9, 3.7792995849447103`*^9}, {3.7792996944089365`*^9, 
   3.7792996974508038`*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"6539ee1e-5d5b-4c5b-af9b-c22a8d8cd16a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 1, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {32, 25}, 
                    "$OutputSize" -> {28, 21}, "$WeightsInputChannels" -> 1], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 28, 21}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {28, 21}, 
                    "$OutputSize" -> {14, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {14, 10}, 
                    "$OutputSize" -> {10, 6}, "$WeightsInputChannels" -> 20], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 10, 6}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {10, 6}, 
                    "$OutputSize" -> {5, 3}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 750}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 750, "$InputDimensions" -> {750}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{36, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {36}, "$OutputSize" -> 36, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {25, 32}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.11"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"a\"", "\"b\"", 
                    Skeleton[33], "\"9\""}, "InputDepth" -> 1, "Dimensions" -> 
                    36, "$Rank" -> 0, "$Version" -> "12.0.11"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"32\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"14\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"5\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"750\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.779298410379985*^9, 3.7792984185531254`*^9}, 
   3.779299534729015*^9, {3.7792995701971545`*^9, 3.779299585297765*^9}, 
   3.779299662202077*^9, 3.7792996977739916`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"9c12d53a-f468-430b-9944-79b357664909"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrainedNeuralNetwork", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"NeuralNetwork", ",", "PreppedTrainingData", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "50"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.777111971309348*^9, 3.7771120208414273`*^9}, 
   3.7771120926979513`*^9, {3.7771124532079916`*^9, 3.7771124532509427`*^9}, 
   3.779298371122981*^9, {3.779298487659293*^9, 3.7792984880502477`*^9}, {
   3.7792996016041512`*^9, 3.779299602833863*^9}, 3.779299719281412*^9, 
   3.779303988791137*^9},
 CellLabel->"In[61]:=",ExpressionUUID->"1b26a104-6497-465a-9287-b5552a3f8a48"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {32, 25}, 
                    "$OutputSize" -> {28, 21}, "$WeightsInputChannels" -> 1], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 28, 21}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {28, 21}, 
                    "$OutputSize" -> {14, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {14, 10}, 
                    "$OutputSize" -> {10, 6}, "$WeightsInputChannels" -> 20], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 10, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {10, 6}, 
                    "$OutputSize" -> {5, 3}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 750}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 750, "$InputDimensions" -> {750}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{36, 500}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{36}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {36}, "$OutputSize" -> 36, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "11" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {25, 32}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.11"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"a\"", "\"b\"", 
                    Skeleton[33], "\"9\""}, "InputDepth" -> 1, "Dimensions" -> 
                    36, "$Rank" -> 0, "$Version" -> "12.0.11"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"32\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"14\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"5\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"750\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.777112021473386*^9, 3.77711209020192*^9, 3.7771121265567207`*^9, 
   3.7771126185699754`*^9, 3.7771139145473585`*^9, 3.779298374277544*^9, 
   3.7792984129720516`*^9, 3.7792984913135195`*^9, 3.7792996057849708`*^9, {
   3.779299691152645*^9, 3.7792997139955482`*^9}, 3.7792997505356503`*^9, 
   3.779304381211321*^9},
 CellLabel->"Out[61]=",ExpressionUUID->"ce049be6-0ae8-4dce-b01d-c4d3a5198c92"]
}, Open  ]],

Cell["\<\
The accuracy of our network seems great, but remember we need to get 8 \
guesses right for a single CAPTCHA to be broken.\
\>", "Text",
 CellChangeTimes->{{3.777113809550328*^9, 
  3.7771138509908595`*^9}},ExpressionUUID->"32d361fd-ce00-43de-9b54-\
1b8866429835"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{
  "TrainedNeuralNetwork", ",", "PreppedTestData", ",", "\"\<Accuracy\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.7771121507847586`*^9, 3.7771121563257675`*^9}, {
  3.777112210858161*^9, 3.7771122456050367`*^9}, {3.777112438237961*^9, 
  3.7771124470460024`*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"0b075b56-2e22-45f3-a5bf-5e5f0f510442"],

Cell[BoxData["0.99625`"], "Output",
 CellChangeTimes->{{3.777112216852227*^9, 3.77711224595103*^9}, {
   3.7771124239399433`*^9, 3.7771124480199404`*^9}, 3.7771126237419767`*^9, 
   3.777113919740361*^9, 3.7792997573374586`*^9, 3.7793044008512244`*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"c8c78766-7e94-4e8d-820f-e94e2ce54d95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "^", "8"}]], "Input",
 CellChangeTimes->{{3.7771138533438487`*^9, 3.77711385926336*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"5f6be3c5-92c7-4c79-95a9-5afde495fcd2"],

Cell[BoxData["0.9703908106763227`"], "Output",
 CellChangeTimes->{3.7771139206703606`*^9, 3.779299758197195*^9, 
  3.7793044017220635`*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"cc58931c-1d21-4b38-b80f-7f55e7846cc9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Streamlining the solution", "Section",
 CellChangeTimes->{{3.7771138788943624`*^9, 
  3.7771138909743605`*^9}},ExpressionUUID->"e63e201c-6d4d-4a94-970e-\
b609345d4906"],

Cell["\<\
Define our SolveCAPTCHA function and evaluate the real accuracy\
\>", "Text",
 CellChangeTimes->{{3.77711390356636*^9, 3.7771139084463615`*^9}, {
  3.777113939073541*^9, 
  3.777113943042552*^9}},ExpressionUUID->"6ba7c66f-36cc-489e-8dcd-\
882745e3286a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SolveCAPTCHA", "[", "im_", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"TrainedNeuralNetwork", "/@", 
    RowBox[{"SplitImage", "@", "im"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SolveCAPTCHA", "@", "Example"}]}], "Input",
 CellChangeTimes->{{3.777112271070578*^9, 3.777112317864467*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"176476b7-0262-4227-b50e-9548e5119597"],

Cell[BoxData["\<\"1qcxvuco\"\>"], "Output",
 CellChangeTimes->{3.777112318188414*^9, 3.7771139480324745`*^9, 
  3.7792997646947837`*^9},
 CellLabel->"Out[60]=",ExpressionUUID->"159800be-b14e-45b1-8473-a23fde5f9a2e"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"EvaluateAccuracy", "[", 
   RowBox[{"solver_", ",", "dset_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"Boole", "/@", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"solver", "@", 
         RowBox[{"First", "@", "dpoint"}]}], "\[Equal]", 
        RowBox[{"Last", "@", "dpoint"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"dpoint", ",", "dset"}], "}"}]}], "]"}]}], "//", "Mean"}], "//",
    "N"}]}]], "Input",
 CellChangeTimes->{{3.777112325623454*^9, 3.777112370806433*^9}, {
  3.7771127523563128`*^9, 3.777112758741392*^9}},
 CellLabel->
  "In[114]:=",ExpressionUUID->"f35f2c94-86da-4f7d-ae69-f809a4c41566"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateAccuracy", "[", 
  RowBox[{"SolveCAPTCHA", ",", "TrainingData"}], "]"}]], "Input",
 CellChangeTimes->{{3.7771123782519407`*^9, 3.7771123882299786`*^9}, {
  3.777112760711419*^9, 3.777112784196944*^9}},
 CellLabel->
  "In[115]:=",ExpressionUUID->"bbb1742b-63e8-482b-90de-f1298cdacb05"],

Cell[BoxData["0.994`"], "Output",
 CellChangeTimes->{
  3.777112394216942*^9, 3.777112634860977*^9, {3.777112765011939*^9, 
   3.7771127889129066`*^9}, 3.777113955394475*^9},
 CellLabel->
  "Out[115]=",ExpressionUUID->"2cad0fc5-5385-4515-acfd-8e4c0e386816"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateAccuracy", "[", 
  RowBox[{"SolveCAPTCHA", ",", "TestData"}], "]"}]], "Input",
 CellChangeTimes->{{3.7771123940669403`*^9, 3.7771123944389544`*^9}, {
  3.7771127903879676`*^9, 3.7771127955739737`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"0af90bab-2fa2-42fc-8ea6-ee19b73fb99e"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.777112395593943*^9, 3.777112635337979*^9, 
  3.7771127963699064`*^9, 3.777113955882473*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"6470bbc0-0c82-4d07-8da1-44bd2ba80389"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Playing with built-in Mathematica functions", "Section",
 CellChangeTimes->{{3.7771131801186976`*^9, 
  3.777113189024687*^9}},ExpressionUUID->"28ed42c7-c119-4808-a81c-\
87b84722e433"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrepareDataSet2", "[", "dset_", "]"}], ":=", 
  RowBox[{"RandomShuffle", "@", 
   RowBox[{"Flatten", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"First", "@", "#"}], "\[Rule]", 
         RowBox[{"Last", "@", "#"}]}], "&"}], "/@", 
       RowBox[{"Transpose", "@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"SplitImage", "@", 
           RowBox[{"First", "@", "dpoint"}]}], ",", 
          RowBox[{"Characters", "@", 
           RowBox[{"Last", "@", "dpoint"}]}]}], "}"}]}]}], ",", 
      RowBox[{"{", 
       RowBox[{"dpoint", ",", "dset"}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.777113194102707*^9, 3.777113211111002*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"4944a44e-d011-42e4-91d5-e85114cd31ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Classifier", "=", 
  RowBox[{"Classify", "@", 
   RowBox[{"PrepareDataSet2", "@", "TrainingData"}]}]}]], "Input",
 CellChangeTimes->{{3.7771132412519813`*^9, 3.777113252064173*^9}},
 CellLabel->
  "In[100]:=",ExpressionUUID->"95ae8dbb-88c4-4544-b479-9d9c44836a47"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["36", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"0\"", ",", "\"1\"", ",", "\"2\"", ",", "\"3\"",
                     ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", 
                    ",", "\"8\"", ",", "\"9\"", ",", "\"a\"", ",", "\"b\"", 
                    ",", "\"c\"", ",", "\"d\"", ",", "\"e\"", ",", "\"f\"", 
                    ",", "\"g\"", ",", "\"h\"", ",", "\"i\"", ",", "\"j\"", 
                    ",", "\"k\"", ",", "\"l\"", ",", "\"m\"", ",", "\"n\"", 
                    ",", "\"o\"", ",", "\"p\"", ",", "\"q\"", ",", "\"r\"", 
                    ",", "\"s\"", ",", "\"t\"", ",", "\"u\"", ",", "\"v\"", 
                    ",", "\"w\"", ",", "\"x\"", ",", "\"y\"", ",", "\"z\""}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Image\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    TooltipBox["36", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{"\"0\"", ",", "\"1\"", ",", "\"2\"", ",", "\"3\"",
                     ",", "\"4\"", ",", "\"5\"", ",", "\"6\"", ",", "\"7\"", 
                    ",", "\"8\"", ",", "\"9\"", ",", "\"a\"", ",", "\"b\"", 
                    ",", "\"c\"", ",", "\"d\"", ",", "\"e\"", ",", "\"f\"", 
                    ",", "\"g\"", ",", "\"h\"", ",", "\"i\"", ",", "\"j\"", 
                    ",", "\"k\"", ",", "\"l\"", ",", "\"m\"", ",", "\"n\"", 
                    ",", "\"o\"", ",", "\"p\"", ",", "\"q\"", ",", "\"r\"", 
                    ",", "\"s\"", ",", "\"t\"", ",", "\"u\"", ",", "\"v\"", 
                    ",", "\"w\"", ",", "\"x\"", ",", "\"y\"", ",", "\"z\""}], 
                    "}"}], Short[#, 1]& ]], Annotation[#, 
                    
                    Short[{"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", 
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z"}, 1], "Tooltip"]& ], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["8000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local7"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 41293712, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            8271673262452627173823677146839437429508301169082109760272, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local7", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 8271673262452627173823677146839437429508301169082109760272,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7771133866311913`*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"8a8d8e45-b35c-4e2c-ba8c-d89be6b93747"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ClassifySolver", "[", "im_", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Classifier", "/@", 
    RowBox[{"SplitImage", "@", "im"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.777112814040948*^9, 3.777112892513873*^9}, {
  3.777113097724985*^9, 3.7771131146599813`*^9}, {3.7771132647551775`*^9, 
  3.7771132667681413`*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"b8f12610-cdce-49db-af94-051e3b92bafd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateAccuracy", "[", 
  RowBox[{"ClassifySolver", ",", "TestData"}], "]"}]], "Input",
 CellChangeTimes->{3.777113137941675*^9},
 CellLabel->
  "In[102]:=",ExpressionUUID->"72aac207-2759-4abc-ae17-04903b1af4ca"],

Cell[BoxData["0.77`"], "Output",
 CellChangeTimes->{3.7771131407626743`*^9, 3.7771134216621923`*^9},
 CellLabel->
  "Out[102]=",ExpressionUUID->"126eabf6-f875-40ef-bdc8-d54b60644268"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Using a massive dataset of ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "4"], TraditionalForm]],
  FormatType->"TraditionalForm",ExpressionUUID->
  "63afc51a-a78d-476a-aa47-ccafe75b356d"],
 " CAPTCHAs"
}], "Section",
 CellChangeTimes->{{3.777114007684765*^9, 
  3.777114022656804*^9}},ExpressionUUID->"337d7731-11f7-4158-bfb8-\
92163db0e068"],

Cell["\<\
Not much improvement using 10x the number of training examples...\
\>", "Text",
 CellChangeTimes->{{3.7771167792877283`*^9, 
  3.77711679754769*^9}},ExpressionUUID->"0459e391-b5cc-4b39-bb89-\
a9a9ea08035f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"MassiveTrainingData", "=", 
   RowBox[{"ImportDataSet", "@", 
    RowBox[{
    "FileNames", "[", 
     "\"\<C:\\\\Users\\\\fidel\\\\Desktop\\\\massive\\\\*.jpg\>\"", "]"}]}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MassiveTestData", "=", 
   RowBox[{"ImportDataSet", "@", 
    RowBox[{
    "FileNames", "[", 
     "\"\<C:\\\\Users\\\\fidel\\\\Desktop\\\\Dropbox\\\\Programacion\\\\\
Prenota\\\\captcha\\\\data\\\\labelled\\\\test\\\\*.jpg\>\"", "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "/@", 
  RowBox[{"{", 
   RowBox[{"MassiveTrainingData", ",", "MassiveTestData"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.777114023631748*^9, 3.7771140933599863`*^9}, 
   3.7771141270249834`*^9},
 CellLabel->
  "In[117]:=",ExpressionUUID->"0b349b0e-7aff-479c-8938-b9840216cde9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"10000", ",", "400"}], "}"}]], "Output",
 CellChangeTimes->{3.7771143144113784`*^9},
 CellLabel->
  "Out[119]=",ExpressionUUID->"1bd4e0e9-ea11-4900-8cbb-8f60b72c9412"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrainedNeuralNetwork2", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"LeNet", ",", 
    RowBox[{"PrepareDataSet", "@", "MassiveTrainingData"}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "50"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7771141420939565`*^9, 3.7771141699660397`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"903d83a3-bf5b-4673-9c46-2d4fbcc98e82"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["11", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 1, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 1, "$InputSize" -> {32, 25}, 
                    "$OutputSize" -> {28, 21}, "$WeightsInputChannels" -> 1], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 28, 21}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {28, 21}, 
                    "$OutputSize" -> {14, 10}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 28, 21}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {14, 10}, 
                    "$OutputSize" -> {10, 6}, "$WeightsInputChannels" -> 20], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 14, 10}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 10, 6}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {10, 6}, 
                    "$OutputSize" -> {5, 3}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 10, 6}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 5, 3}, NeuralNetworks`RealT]],
                     "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]]], 
                    "8" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 750}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 750, "$InputDimensions" -> {750}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{750}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{36, 500}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{36}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {36}, "$OutputSize" -> 36, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]], 
                    "11" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {36}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{36}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{1, 32, 25}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {25, 32}, "ColorSpace" -> "Grayscale", 
                    "ColorChannels" -> 1, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.11"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{36}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {"\"a\"", "\"b\"", 
                    Skeleton[33], "\"9\""}, "InputDepth" -> 1, "Dimensions" -> 
                    36, "$Rank" -> 0, "$Version" -> "12.0.11"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\"", 
                    "\"32\"", "\"25\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"28\"", "\"21\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"14\"", "\"10\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"10\"", "\"6\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"5\"", "\"3\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"750\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"36\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7771163370514145`*^9},
 CellLabel->
  "Out[122]=",ExpressionUUID->"1dbfc7a7-eba0-4958-87a6-fa152b7efdb6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"TrainedNeuralNetwork", ",", 
   RowBox[{"PrepareDataSet", "@", "MassiveTestData"}], ",", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellLabel->
  "In[120]:=",ExpressionUUID->"b1765d53-e6f8-456d-94aa-00ba81659701"],

Cell[BoxData["0.9998784722213168`"], "Output",
 CellChangeTimes->{3.777114315905344*^9},
 CellLabel->
  "Out[120]=",ExpressionUUID->"70b8a9b7-a70d-417b-865e-1d72dddbb5b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"TrainedNeuralNetwork2", ",", 
   RowBox[{"PrepareDataSet", "@", "MassiveTestData"}], ",", 
   "\"\<Accuracy\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.7771142035501795`*^9, 3.777114219855184*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"3b183d33-2509-4f4b-99df-cbea81a8bcc0"],

Cell[BoxData["0.9999218749994179`"], "Output",
 CellChangeTimes->{3.7771163384054117`*^9},
 CellLabel->
  "Out[123]=",ExpressionUUID->"b5cac6be-9462-4209-888c-77ed02b1c01a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateAccuracy", "[", 
  RowBox[{"SolveCAPTCHA", ",", "MassiveTestData"}], "]"}]], "Input",
 CellChangeTimes->{{3.7771142412471476`*^9, 3.7771142490061846`*^9}, 
   3.777114402453346*^9},
 CellLabel->
  "In[124]:=",ExpressionUUID->"71b9e07c-2869-4ec5-be4c-3fac30002d25"],

Cell[BoxData["0.995`"], "Output",
 CellChangeTimes->{3.777114316376346*^9, 3.7771163402884126`*^9},
 CellLabel->
  "Out[124]=",ExpressionUUID->"469e2238-7b94-45f0-ba9d-b2ac37cc1598"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SolveCAPTCHA2", "[", "im_", "]"}], ":=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"TrainedNeuralNetwork2", "/@", 
    RowBox[{"SplitImage", "@", "im"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7771144174213467`*^9, 3.777114419981412*^9}},
 CellLabel->
  "In[125]:=",ExpressionUUID->"00c0a3e2-ead1-45d2-af6c-7db7f49cdac1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EvaluateAccuracy", "[", 
  RowBox[{"SolveCAPTCHA2", ",", "MassiveTestData"}], "]"}]], "Input",
 CellChangeTimes->{3.77711425252518*^9, 3.7771144238054132`*^9},
 CellLabel->
  "In[126]:=",ExpressionUUID->"bfd3183b-e010-41a9-9bc0-2ce6ab77a688"],

Cell[BoxData["0.9925`"], "Output",
 CellChangeTimes->{3.777116342120414*^9},
 CellLabel->
  "Out[126]=",ExpressionUUID->"4c27825c-e30a-4b62-8dbb-22a7e128d416"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Evaluator->"Local7",
WindowSize->{1520, 805},
WindowMargins->{{-8, Automatic}, {Automatic, 0}},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 175, 2, 28, "Input",ExpressionUUID->"849afddc-a818-44e8-8476-eedbb95cc64d"],
Cell[CellGroupData[{
Cell[758, 26, 157, 3, 96, "Title",ExpressionUUID->"ad1af4d9-e950-4515-af8d-274aa4667224"],
Cell[918, 31, 263, 6, 53, "Subtitle",ExpressionUUID->"1f964149-e896-44de-9680-23241456ab41"],
Cell[CellGroupData[{
Cell[1206, 41, 368, 7, 48, "Input",ExpressionUUID->"209e100f-0f59-4c45-a619-d6e852c35515"],
Cell[1577, 50, 32972, 545, 105, "Output",ExpressionUUID->"7c33889f-aa3e-42b8-b33a-9ec7958642d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[34586, 600, 162, 3, 67, "Section",ExpressionUUID->"cb2549c3-ff61-4de6-a177-b76f25bbe8bc"],
Cell[34751, 605, 255, 4, 34, "Text",ExpressionUUID->"fcffdf3e-e701-46eb-952e-ce688a7b5386"],
Cell[CellGroupData[{
Cell[35031, 613, 499, 10, 28, "Input",ExpressionUUID->"2f025b1c-f533-4920-9b51-4a29b496b99c"],
Cell[35533, 625, 984, 15, 32, "Output",ExpressionUUID->"2d3cc3be-8f5c-44e8-8484-42d9d72f2f31"]
}, Open  ]],
Cell[36532, 643, 615, 18, 34, "Text",ExpressionUUID->"1d34931d-9aaf-4f51-8a9a-45035141779c"],
Cell[37150, 663, 527, 13, 28, "Input",ExpressionUUID->"7c4b72aa-ac75-4312-b6b7-cefcb8a2cee5"],
Cell[37680, 678, 1555, 27, 48, "Input",ExpressionUUID->"ef2e7fd2-12bd-461c-bf9d-db81b10663e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[39272, 710, 159, 3, 67, "Section",ExpressionUUID->"27a71933-f07e-4088-a602-c8905cf0bb2e"],
Cell[39434, 715, 653, 12, 56, "Text",ExpressionUUID->"d3fe6b61-7597-4ade-9985-fc8a5e5ae330"],
Cell[40090, 729, 1229, 31, 67, "Input",ExpressionUUID->"095d5c89-9bb1-436a-a0e7-37c6d54880d5"],
Cell[CellGroupData[{
Cell[41344, 764, 208, 3, 28, "Input",ExpressionUUID->"6e405ae0-abdb-47e9-88b4-0fa8eed5d2ab"],
Cell[41555, 769, 9306, 197, 51, "Output",ExpressionUUID->"21eaec46-857e-402d-9c04-557a51b5ea97"]
}, Open  ]],
Cell[50876, 969, 392, 8, 34, "Text",ExpressionUUID->"836966f3-8ce6-416f-86ea-2696a7239b79"],
Cell[CellGroupData[{
Cell[51293, 981, 576, 12, 48, "Input",ExpressionUUID->"bea19505-eab0-41c9-9d1b-cdfdc8f71729"],
Cell[51872, 995, 274, 4, 32, "Output",ExpressionUUID->"94e40abe-0111-4a72-902d-20b43c5fa763"]
}, Open  ]],
Cell[52161, 1002, 400, 10, 34, "Text",ExpressionUUID->"c0921143-f4e9-4285-ad2b-66f2963ee135"],
Cell[52564, 1014, 388, 8, 28, "Input",ExpressionUUID->"edad988c-9ff0-40a2-b7fb-3854db10dc87"],
Cell[52955, 1024, 981, 25, 28, "Input",ExpressionUUID->"c8068e84-5e3d-4490-b7df-60d33567aeb8"],
Cell[CellGroupData[{
Cell[53961, 1053, 645, 14, 67, "Input",ExpressionUUID->"8d3ddfd3-0382-45c0-969f-737e60e5a9d0"],
Cell[54609, 1069, 12042, 253, 51, "Output",ExpressionUUID->"2f77742b-e1c7-4ab3-9035-a830efe59291"]
}, Open  ]],
Cell[CellGroupData[{
Cell[66688, 1327, 261, 5, 28, "Input",ExpressionUUID->"444574fb-bd3c-4a2a-ac3d-da9e6e15d6b4"],
Cell[66952, 1334, 12446, 261, 51, "Output",ExpressionUUID->"cef94213-20c6-42ff-8331-67357a9fe680"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[79447, 1601, 187, 3, 67, "Section",ExpressionUUID->"d6bd5e20-0cf1-4061-9d53-9eeaa5b8872c"],
Cell[79637, 1606, 201, 3, 34, "Text",ExpressionUUID->"bdb37c47-8eb4-4219-93c5-104580591de1"],
Cell[CellGroupData[{
Cell[79863, 1613, 2921, 58, 314, "Input",ExpressionUUID->"6539ee1e-5d5b-4c5b-af9b-c22a8d8cd16a"],
Cell[82787, 1673, 41809, 847, 88, "Output",ExpressionUUID->"9c12d53a-f468-430b-9944-79b357664909"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124633, 2525, 614, 10, 28, "Input",ExpressionUUID->"1b26a104-6497-465a-9287-b5552a3f8a48"],
Cell[125250, 2537, 41079, 830, 88, "Output",ExpressionUUID->"ce049be6-0ae8-4dce-b01d-c4d3a5198c92"]
}, Open  ]],
Cell[166344, 3370, 273, 6, 34, "Text",ExpressionUUID->"32d361fd-ce00-43de-9b54-1b8866429835"],
Cell[CellGroupData[{
Cell[166642, 3380, 406, 8, 28, "Input",ExpressionUUID->"0b075b56-2e22-45f3-a5bf-5e5f0f510442"],
Cell[167051, 3390, 331, 4, 32, "Output",ExpressionUUID->"c8c78766-7e94-4e8d-820f-e94e2ce54d95"]
}, Open  ]],
Cell[CellGroupData[{
Cell[167419, 3399, 195, 3, 28, "Input",ExpressionUUID->"5f6be3c5-92c7-4c79-95a9-5afde495fcd2"],
Cell[167617, 3404, 218, 3, 32, "Output",ExpressionUUID->"cc58931c-1d21-4b38-b80f-7f55e7846cc9"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[167884, 3413, 174, 3, 67, "Section",ExpressionUUID->"e63e201c-6d4d-4a94-970e-b609345d4906"],
Cell[168061, 3418, 263, 6, 34, "Text",ExpressionUUID->"6ba7c66f-36cc-489e-8dcd-882745e3286a"],
Cell[CellGroupData[{
Cell[168349, 3428, 421, 8, 48, "Input",ExpressionUUID->"176476b7-0262-4227-b50e-9548e5119597"],
Cell[168773, 3438, 215, 3, 32, "Output",ExpressionUUID->"159800be-b14e-45b1-8473-a23fde5f9a2e"]
}, Open  ]],
Cell[169003, 3444, 685, 19, 28, "Input",ExpressionUUID->"f35f2c94-86da-4f7d-ae69-f809a4c41566"],
Cell[CellGroupData[{
Cell[169713, 3467, 316, 6, 28, "Input",ExpressionUUID->"bbb1742b-63e8-482b-90de-f1298cdacb05"],
Cell[170032, 3475, 257, 5, 32, "Output",ExpressionUUID->"2cad0fc5-5385-4515-acfd-8e4c0e386816"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170326, 3485, 316, 6, 28, "Input",ExpressionUUID->"0af90bab-2fa2-42fc-8ea6-ee19b73fb99e"],
Cell[170645, 3493, 226, 4, 32, "Output",ExpressionUUID->"6470bbc0-0c82-4d07-8da1-44bd2ba80389"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[170920, 3503, 190, 3, 67, "Section",ExpressionUUID->"28ed42c7-c119-4808-a81c-87b84722e433"],
Cell[171113, 3508, 838, 22, 28, "Input",ExpressionUUID->"4944a44e-d011-42e4-91d5-e85114cd31ad"],
Cell[CellGroupData[{
Cell[171976, 3534, 288, 6, 28, "Input",ExpressionUUID->"95ae8dbb-88c4-4544-b479-9d9c44836a47"],
Cell[172267, 3542, 13050, 254, 90, "Output",ExpressionUUID->"8a8d8e45-b35c-4e2c-ba8c-d89be6b93747"]
}, Open  ]],
Cell[185332, 3799, 452, 10, 28, "Input",ExpressionUUID->"b8f12610-cdce-49db-af94-051e3b92bafd"],
Cell[CellGroupData[{
Cell[185809, 3813, 237, 5, 28, "Input",ExpressionUUID->"72aac207-2759-4abc-ae17-04903b1af4ca"],
Cell[186049, 3820, 183, 3, 32, "Output",ExpressionUUID->"126eabf6-f875-40ef-bdc8-d54b60644268"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[186281, 3829, 368, 11, 67, "Section",ExpressionUUID->"337d7731-11f7-4158-bfb8-92163db0e068"],
Cell[186652, 3842, 216, 5, 34, "Text",ExpressionUUID->"0459e391-b5cc-4b39-bb89-a9a9ea08035f"],
Cell[CellGroupData[{
Cell[186893, 3851, 843, 22, 67, "Input",ExpressionUUID->"0b349b0e-7aff-479c-8938-b9840216cde9"],
Cell[187739, 3875, 206, 5, 32, "Output",ExpressionUUID->"1bd4e0e9-ea11-4900-8cbb-8f60b72c9412"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187982, 3885, 399, 8, 28, "Input",ExpressionUUID->"903d83a3-bf5b-4673-9c46-2d4fbcc98e82"],
Cell[188384, 3895, 40950, 830, 88, "Output",ExpressionUUID->"1dbfc7a7-eba0-4958-87a6-fa152b7efdb6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229371, 4730, 273, 6, 28, "Input",ExpressionUUID->"b1765d53-e6f8-456d-94aa-00ba81659701"],
Cell[229647, 4738, 171, 3, 32, "Output",ExpressionUUID->"70b8a9b7-a70d-417b-865e-1d72dddbb5b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[229855, 4746, 342, 7, 28, "Input",ExpressionUUID->"3b183d33-2509-4f4b-99df-cbea81a8bcc0"],
Cell[230200, 4755, 173, 3, 32, "Output",ExpressionUUID->"b5cac6be-9462-4209-888c-77ed02b1c01a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230410, 4763, 296, 6, 28, "Input",ExpressionUUID->"71b9e07c-2869-4ec5-be4c-3fac30002d25"],
Cell[230709, 4771, 182, 3, 32, "Output",ExpressionUUID->"469e2238-7b94-45f0-ba9d-b2ac37cc1598"]
}, Open  ]],
Cell[230906, 4777, 360, 8, 28, "Input",ExpressionUUID->"00c0a3e2-ead1-45d2-af6c-7db7f49cdac1"],
Cell[CellGroupData[{
Cell[231291, 4789, 266, 5, 28, "Input",ExpressionUUID->"bfd3183b-e010-41a9-9bc0-2ce6ab77a688"],
Cell[231560, 4796, 159, 3, 32, "Output",ExpressionUUID->"4c27825c-e30a-4b62-8dbb-22a7e128d416"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

